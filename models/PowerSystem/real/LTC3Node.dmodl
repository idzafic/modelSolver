Header:
	maxIter = 50 	//Solution start time for time domain (ODE and DAE) problems
	report = AllDetails 	//Solved - only final solved solution, All - shows solved and nonSolved with iterations, AllDetails - All + debug information 
	maxReps = -1 	//Used to limit repetitions (-1: no limit)
	outToTxt = false 	//true: create output txt file for results, fale: output file was not created
	txtFile = "" 	//only valid if outToTxt was set to true
end
//Load voltage regulated by LTC local voltage regulator
//Similarly, it can be also implemented for line drop compensator with LTC
Model [type=NL domain=real eps=1e-6 name="PF for 3 nodes (second node is Zero Injection)"]:
Vars [out=true]:
	δ_2=δ_1	// Variable name and its initial value (optional)
	v_2=v_1
	δ_3=δ_1
	v_3=v_1
	t=1	//tap position
Params:
	v_1=1
	δ_1=0		// Parameter name and its value
	aY=32.8797974610715
	aY11=aY
	aY21=aY; aY22=65.7595949221429; aY23=aY
	aY32=aY; aY33=aY
	θ_diag=-1.40564764938027 
	θ_offDiag=1.73594500420952 
	θ_11=θ_diag
	θ_21=θ_offDiag
	
	θ_22=θ_diag; θ_23=θ_offDiag; θ_32=θ_offDiag; θ_33=θ_diag
	
	cLTC23Reg=true [out=true]	//if true -> not discretized, otherwise discretized
	deltaLTC = 0.0125	//LTC step size
	
	P3_inj=-1
	Q3_inj=-0.32
	V_3_sp = 1	//regulation set point (mid of deadband)
	t_fix = 1	//fixed value of tap position
	t_min = 1 - 10*deltaLTC	//min tap position 
	t_max = 1 + 10*deltaLTC //max tap position
	LTC_pos = 0 [type=int out=true] //tap position (relative to neutral)
	
NLEs:
	// node 2 (ZI)
	aY21*v_1*cos(θ_21+δ_1) + v_2*aY*(1+t^2)*cos(θ_22+δ_2) + t*aY23*v_3*cos(θ_23+δ_3)=0
	aY21*v_1*sin(θ_21+δ_1) + v_2*aY*(1+t^2)*sin(θ_22+δ_2) + t*aY23*v_3*sin(θ_23+δ_3)=0
	// node 3 
	v_3^2*aY33*cos(θ_33) + t*v_3*(aY32*v_2*cos(δ_3-θ_32-δ_2)) = P3_inj
	-v_3^2*aY33*sin(θ_33) + t*v_3*(aY32*v_2*sin(δ_3-θ_32-δ_2)) = Q3_inj
	if cLTC23Reg:
		v_3 = V_3_sp
	else:
		t=t_fix
	end
IterPostP:
	LTC_pos = round((t-1)/deltaLTC, 0)
Limits:
	group [name="LTC" enabled=true]:
		// PV generator on node 2 
		if cLTC23Reg:
			if t <= t_min [signal=TooLow]:
				t_fix=t_min		// set to min LTC limit 
			else:
				if t >= t_max [signal=TooHigh]:
					t_fix=t_max		// set to max LTC limit 
				else [signal=Rounding]:
					//find discretized LTC position
					t_fix=disc(t, 1, deltaLTC)
				end
			end
			t = t_fix
			cLTC23Reg=false		// fix LTC position (its on min, max, or rounded/discr.)
		end
	end	//end group
PostProc:
	LTC_pos = round((t-1)/deltaLTC, 0) //calculate SCADA position (integer value)
end