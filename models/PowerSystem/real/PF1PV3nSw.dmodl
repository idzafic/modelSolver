Header:
	maxIter = 50 	//Solution start time for time domain (ODE and DAE) problems
	report = AllDetails 	//Solved and unsolved cases with iterations and debug information
	maxReps = -1 	//Used to limit repetitions (-1: no limit)
	outToTxt = false 	//true: create output txt file for results, fale: output file was not created
	txtFile = "" 	//only valid if outToTxt was set to true
end
//node1->slack, node2->PV, node3->PQ
Model [type=NL name="PF"]:
Vars [out=true]:
	δ_2=δ_1	// Variable name and its initial value (optional)
	v_2=v_1
	δ_3=δ_1
	v_3=v_1
Params:
	v_1=1 [out=true]	//slack voltage
	δ_1=π/4		// slack angle
	aY=32.8797974610715
	aY11=aY
	aY21=aY; aY22=65.7595949221429; aY23=aY
	aY32=aY; aY33=aY
	θ_diag=-1.40564764938027 
	θ_offDiag=1.73594500420952 
	θ_11=θ_diag
	θ_21=θ_offDiag
	θ_22=θ_diag
	θ_23=θ_offDiag
	θ_32=θ_offDiag [out=true]
	θ_33=θ_diag
	cGen2Reg=true [type=bool out=true]	// initially generator on node 2 is in regulation mode 
	P2_inj=0.1
	Q2_inj=0.111 [out=true]
	Q2_inj_min=-0.5
	Q2_inj_max=0.5
	V2_sp=1.01
	P3_inj=-1
	Q3_inj=-0.3
NLEs:
	// node 2 (PV node)
	v_2^2*aY22*cos(θ_22) + v_2*(aY21*v_1*cos(δ_2-θ_21-δ_1) + aY23*v_3*cos(δ_2-θ_23-δ_3))=P2_inj
	switch:
		case cGen2Reg -> v_2=V2_sp	// if node is PV 
		default -> -v_2^2*aY22*sin(θ_22) + v_2*(aY21*v_1*sin(δ_2-θ_21-δ_1) + aY23*v_3*sin(δ_2-θ_23-δ_3))=Q2_inj //PQ
	end
	// node 3 
	v_3^2*aY33*cos(θ_33) + v_3*(aY32*v_2*cos(δ_3-θ_32-δ_2)) = P3_inj
	-v_3^2*aY33*sin(θ_33) + v_3*(aY32*v_2*sin(δ_3-θ_32-δ_2)) = Q3_inj
Limits:
	group [name="Gen2" enabled=true]:
		// PV generator on node 2 
		if cGen2Reg:
			Q2_inj=-v_2^2*aY22*sin(θ_22) + v_2*(aY21*v_1*sin(δ_2-θ_21-δ_1) + aY23*v_3*sin(δ_2-θ_23-δ_3))
			switch:
				case Q2_inj <= Q2_inj_min [signal=TooLow] -> cGen2Reg=false; Q2_inj=Q2_inj_min // turn off regulation (set generator to PQ) with Q=minQ 
				case Q2_inj >= Q2_inj_max [signal=TooHigh] -> cGen2Reg=false; Q2_inj=Q2_inj_max  // turn off regulation (set generator to PQ) with Q=maxQ 
			end
		end
	end
end