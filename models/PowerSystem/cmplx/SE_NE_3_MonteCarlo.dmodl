Header:
	maxIter=50
	report=AllDetails //Solved - only final solved solution, All - shows solved and nonSolved with iterations, AllWithDetails - All + debug information 
end  //end of header
//Model created by xml -> modl converter
Model [type=WLS domain=real eps=1e-5 name="GNSE With Noise and Statistics"]:
Vars [out=true]:
	v_1=1
	phi_2=0		// Variable name and its initial value (optional)
	v_2=1
	phi_3=0
	v_3=1
Params:
	w_inj=1
	w_v=1
	w_zi=10000
	phi_1=0		// Parameter name and its value
	aY=32.8797974610715
	aY11=aY
	aY21=aY
	aY22=65.7595949221429
	aY23=aY
	aY32=aY
	aY33=aY
	thetaDiag=-1.40564764938027 
	thetaOffDiag=1.73594500420952 
	theta11=thetaDiag
	theta21=thetaOffDiag
	theta22=thetaDiag
	theta23=thetaOffDiag
	theta32=thetaOffDiag
	theta33=thetaDiag
	// injection measurements 
	P3_real=-1
	Q3_real=-0.3
	// will be contaminated with sensor's noise 
	P3_inj=P3_real
	Q3_inj=Q3_real
	// voltage measurements 
	v1_meas=1
	v2_meas=0.984267
	v3_meas=0.969386
	P3_est [out=true]
	Q3_est [out=true]
	minVal [out=true]
	maxVal [out=true]
	avgVal [out=true]
	varVal [out=true]
	devVal [out=true]
	iReps=1 [out=true] 
	jReps=1 [out=true] 
Distribs:
	g1 [type=Gauss mean=0 dev=0.03 width=0.1]
	g2 [type=Gauss mean=0.001 dev=0.04 width=0.1]
Stats:
	stat
// add sensor noise (Gauss) to measurements 
PreProc:
	P3_inj = P3_real + rnd(g1)
	Q3_inj = Q3_real + rnd(g1)
	v1_meas = 1 + rnd(g2)
	v2_meas = 0.984267 + rnd(g2)
	v3_meas = 0.969386 + rnd(g2)
WLSEs:
	// node 2 (ZI)
	[w=w_zi]	v_2*aY22*cos(theta22) + aY21*v_1*cos(phi_2-theta21-phi_1) + aY23*v_3*cos(phi_2-theta23-phi_3) = 0
	[w=w_zi]	-v_2*aY22*sin(theta22) + aY21*v_1*sin(phi_2-theta21-phi_1) + aY23*v_3*sin(phi_2-theta23-phi_3) = 0
	// node 3 
	[w=w_inj]	v_3^2*aY33*cos(theta33) + v_3*(aY32*v_2*cos(phi_3-theta32-phi_2)) = P3_inj
	[w=w_inj]	-v_3^2*aY33*sin(theta33) + v_3*(aY32*v_2*sin(phi_3-theta32-phi_2)) = Q3_inj
	// voltages 
	[w=w_v]	v_1 = v1_meas
	[w=w_v]	v_2 = v2_meas
	[w=w_v]	v_3 = v3_meas
PostProc:
	P3_est = v_3^2*aY33*cos(theta33) + v_3*(aY32*v_2*cos(phi_3-theta32-phi_2))
	Q3_est = -v_3^2*aY33*sin(theta33) + v_3*(aY32*v_2*sin(phi_3-theta32-phi_2))
	stat << abs(P3_est-P3_real) << abs(Q3_est-Q3_real)		// insert absolute estimation errors to 
	minVal = smin(stat)
	maxVal = smax(stat)
	avgVal = avg(stat)
	varVal = var(stat)
	devVal = dev(stat)
Repeats:
	if jReps <= 20:
		iReps += 1
		if iReps > 10:
			iReps = 1
			jReps += 1
		end
		repeat
	end
end